# This is a basic workflow that is manually triggered

name: regression_test

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "linux_job"
  run_tests:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    permissions:
      pages: write
      id-token: write
      contents: read
      issues: read
      checks: write
      pull-requests: write
      
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Install softwares
      run: ./scripts/install.sh

    - name: Build GUIX
      run: ./scripts/build.sh

    - name: Test GUIX
      run: ./scripts/test.sh
      
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2.11.0
      if: always()
      with:
        files: |
          ./test/guix_test/cmake/build/*/*.xml
          
    - name: Upload Test Results
      if: success() || failure()
      uses: actions/upload-artifact@v3.1.3
      with:
        name: test_reports_GUIX
        path: |
          ./test/guix_test/cmake/build/*.txt
          ./test/guix_test/cmake/build/*/Testing/**/*.xml
          ./test/guix_test/cmake/build/**/regression/output_files/*.bin
    
    - name: Configure GitHub Pages
      uses: actions/configure-pages@v3.0.6
        
    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v2.0.0
      with:
        path: ./test/guix_test/cmake/coverage_report/default_build_coverage
        
    - name: Deploy GitHub Pages site
      id: deployment
      uses: actions/deploy-pages@v1.2.9

    - name: Generate Code Coverage Results Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: ./test/guix_test/cmake/coverage_report/default_build_coverage.xml
        format: markdown
        badge: true
        hide_complexity: true
        output: file

    - name: Write Code Coverage Report URL
      run: |
        cat code-coverage-results.md > code-coverage-summary.md
        echo -e "\n" >> code-coverage-summary.md
        echo '[Open Coverage Report](${{ steps.deployment.outputs.page_url }})' >> code-coverage-summary.md
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        cat code-coverage-summary.md >> $GITHUB_STEP_SUMMARY
        
    - name: Create CheckRun for Code Coverage
      uses: LouisBrunner/checks-action@v1.6.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Code Coverage
        conclusion: ${{ job.status }}
        output: |
          {"summary":"Coverage Report"}
        output_text_description_file: code-coverage-summary.md

    - name: Add Code Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        append: true
        path: code-coverage-summary.md
        
