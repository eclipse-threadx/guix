/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.2.0.1                                               */
/*  Date (dd.mm.yyyy): 31.10.2022   Time (hh:mm): 14:09                        */
/*******************************************************************************/


#ifndef _GUIX_MEDICAL_MOUSE_SUPPORT_SPECIFICATIONS_H_
#define _GUIX_MEDICAL_MOUSE_SUPPORT_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define ID_MEDS_SCREEN 1
#define ID_SLIDER1 2
#define ID_SLIDER2 3
#define ID_SLIDER3 4
#define ID_SLIDER4 5
#define ID_PATIENT_NAME 6
#define ID_ADMIT_DATE 7
#define ID_VAL1_DISPLAY 8
#define ID_VAL2_DISPLAY 9
#define ID_VAL3_DISPLAY 10
#define ID_VAL4_DISPLAY 11
#define ID_VITALS_SCREEN 12
#define ID_PATIENTS_SCREEN 13
#define ID_PATIENT_LIST 14
#define ID_ADMIT_COUNT 15
#define ID_SCREEN_BASE 16
#define ID_HOME 17
#define ID_PATIENTS_BUTTON 18
#define ID_MEDS_BUTTON 19
#define ID_VITALS_BUTTON 20


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT

#define GX_ACTION_FLAG_DYNAMIC_TARGET 0x01
#define GX_ACTION_FLAG_DYNAMIC_PARENT 0x02
#define GX_ACTION_FLAG_POP_TARGET     0x04
#define GX_ACTION_FLAG_POP_PARENT     0x08

typedef struct GX_STUDIO_ACTION_STRUCT
{
    GX_UBYTE opcode;
    GX_UBYTE flags;
    GX_CONST VOID *parent;
    GX_CONST VOID *target;
    GX_CONST GX_ANIMATION_INFO  *animation;
} GX_STUDIO_ACTION;

typedef struct GX_STUDIO_EVENT_ENTRY_STRUCT
{
    ULONG event_type;
    USHORT event_sender;
    GX_CONST GX_STUDIO_ACTION *action_list;
} GX_STUDIO_EVENT_ENTRY;

typedef struct GX_STUDIO_EVENT_PROCESS_STRUCT 
{
    GX_CONST GX_STUDIO_EVENT_ENTRY *event_table;
    UINT (*chain_event_handler)(GX_WIDGET *, GX_EVENT *);
} GX_STUDIO_EVENT_PROCESS;

/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    int min_val;
    int max_val;
    int current_val;
    int increment;
    GX_VALUE min_travel;
    GX_VALUE max_travel;
    GX_VALUE needle_width;
    GX_VALUE needle_height;
    GX_VALUE needle_inset;
    GX_VALUE needle_hotspot;
    GX_RESOURCE_ID lower_pixelmap;
    GX_RESOURCE_ID upper_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
} GX_PIXELMAP_SLIDER_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
    VOID (*callback)(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
    int total_rows;
} GX_VERTICAL_LIST_PROPERTIES;

typedef struct
{
   GX_CONST GX_STUDIO_WIDGET *base_info;
   UINT (*base_create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   GX_RECTANGLE size;
} GX_TEMPLATE_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct MED_SCREEN_BASE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_ICON med_screen_base_guix_icon;
    GX_ICON med_screen_base_express_icon;
    GX_ICON med_screen_base_home_icon;
    GX_PROMPT med_screen_base_time_of_day;
    GX_PROMPT med_screen_base_AM_PM;
    GX_PROMPT med_screen_base_day_prompt;
    GX_PROMPT med_screen_base_date_prompt;
    GX_PIXELMAP_BUTTON med_screen_base_patients_button;
    GX_PIXELMAP_BUTTON med_screen_base_meds_button;
    GX_PIXELMAP_BUTTON med_screen_base_vitals_button;
} MED_SCREEN_BASE_CONTROL_BLOCK;

typedef struct MEDS_SCREEN_CONTROL_BLOCK_STRUCT
{
    MED_SCREEN_BASE_CONTROL_BLOCK base;
    GX_PIXELMAP_SLIDER meds_screen_med1_level;
    GX_ICON meds_screen_scale_1;
    GX_ICON meds_screen_scale_2;
    GX_ICON meds_screen_scale_3;
    GX_ICON meds_screen_scale_4;
    GX_PIXELMAP_SLIDER meds_screen_med2_level;
    GX_PIXELMAP_SLIDER meds_screen_med3_level;
    GX_PIXELMAP_SLIDER meds_screen_med4_level;
    GX_PROMPT meds_screen_screen_label_1;
    GX_PROMPT meds_screen_patient_name;
    GX_PROMPT meds_screen_admit_date;
    GX_PROMPT meds_screen_med_label1;
    GX_PROMPT meds_screen_med_label_4;
    GX_PROMPT meds_screen_med_label3;
    GX_PROMPT meds_screen_med_label2;
    GX_PROMPT meds_screen_med_type1;
    GX_PROMPT meds_screen_med_type2;
    GX_PROMPT meds_screen_med_type3;
    GX_PROMPT meds_screen_med_type4;
    GX_PROMPT meds_screen_num_val1;
    GX_PROMPT meds_screen_num_val2;
    GX_PROMPT meds_screen_num_val3;
    GX_PROMPT meds_screen_num_val4;
} MEDS_SCREEN_CONTROL_BLOCK;

typedef struct VITALS_SCREEN_CONTROL_BLOCK_STRUCT
{
    MED_SCREEN_BASE_CONTROL_BLOCK base;
    GX_PROMPT vitals_screen_screen_label;
    GX_PROMPT vitals_screen_patient_name;
    GX_PROMPT vitals_screen_admit_date;
    GX_PROMPT vitals_screen_attended_prompt;
    GX_PROMPT vitals_screen_days_and_hours_prompt;
    GX_PROMPT vitals_screen_avg_hr_prompt;
    GX_PROMPT vitals_screen_min_hr_prompt;
    GX_PROMPT vitals_screen_max_hr_prompt;
    GX_PROMPT vitals_screen_hours;
    GX_PROMPT vitals_screen_days;
    GX_PROMPT vitals_screen_days2;
    GX_PROMPT vitals_screen_average;
    GX_PROMPT vitals_screen_min;
    GX_PROMPT vitals_screen_max;
    GX_WINDOW vitals_screen_waveform_window;
    GX_PIXELMAP_SLIDER vitals_screen_cardio_slider;
    GX_WINDOW vitals_screen_hr_win;
    GX_ICON vitals_screen_heart_icon;
    GX_PROMPT vitals_screen_current_hr_prompt;
} VITALS_SCREEN_CONTROL_BLOCK;

typedef struct PATIENTS_SCREEN_CONTROL_BLOCK_STRUCT
{
    MED_SCREEN_BASE_CONTROL_BLOCK base;
    GX_VERTICAL_LIST patients_screen_patient_list;
    GX_SCROLLBAR patients_screen_vertical_scroll;
    GX_PROMPT patients_screen_admitted_label;
    GX_PROMPT patients_screen_admitted_count;
    GX_PROMPT patients_screen_screen_label;
    GX_PROMPT patients_screen_name_label;
    GX_PROMPT patients_screen_mr_num;
    GX_PROMPT patients_screen_room_label;
    GX_PROMPT patients_screen_mr_num_1;
} PATIENTS_SCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern MEDS_SCREEN_CONTROL_BLOCK meds_screen;
extern VITALS_SCREEN_CONTROL_BLOCK vitals_screen;
extern PATIENTS_SCREEN_CONTROL_BLOCK patients_screen;
extern MED_SCREEN_BASE_CONTROL_BLOCK med_screen_base;
#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT meds_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID med_level_draw(GX_PROMPT *widget);
UINT vitals_screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID waveform_draw(GX_WINDOW *widget);
UINT patients_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID patient_row_create(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT med_screen_base_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID page_button_draw(GX_PIXELMAP_BUTTON *widget);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
    USHORT     rotation_angle;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_list_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_scrollbar_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_template_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);
UINT gx_studio_auto_event_handler(GX_WIDGET *widget, GX_EVENT *event_ptr, GX_CONST GX_STUDIO_EVENT_PROCESS *record);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
