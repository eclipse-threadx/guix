/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.2.0.1                                               */
/*  Date (dd.mm.yyyy): 31.10.2022   Time (hh:mm): 14:09                        */
/*******************************************************************************/


#ifndef _DEMO_GUIX_SMART_WATCH_SPECIFICATIONS_H_
#define _DEMO_GUIX_SMART_WATCH_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define ID_ENGLISH 1
#define ID_SPANISH 2
#define ID_CHINESE 3
#define ID_JAPANESE 4
#define ID_ZOOM_IN 5
#define ID_ZOOM_OUT 6
#define ID_TIME 7
#define ID_ALARM 8
#define ID_STOPWATCH 9
#define ID_CLOSE 10
#define ID_SEARCH 11
#define ID_HOUR_DOWN 12
#define ID_MINUTE_UP 13
#define ID_AM 14
#define ID_PM 15
#define ID_HOUR 16
#define ID_MINUTE 17
#define ID_HOUR_UP 18
#define ID_MINUTE_DOWN 19
#define ID_ADD 20
#define ID_STOPWATCH_START_STOP 21
#define ID_STOPWATCH_RESET 22
#define ID_DASHBOARD 23
#define ID_BRUSH 24
#define ID_LANGUAGE 25
#define ID_SOUND 26
#define ID_SEND 27
#define ID_BACK 28
#define ID_REPLAY 29
#define ID_NEW_MSG 30
#define ID_MSG_LIST 31
#define ID_LEFT 32
#define ID_RIGHT 33
#define ID_SAVE 34
#define ID_TEXT_MOBILE 35
#define ID_TEXT_OFFICE 36
#define ID_EDIT 37
#define ID_CONTACT_LIST 38
#define ID_BTN_MENU_0 39
#define ID_BTN_MENU_1 40
#define ID_BTN_MENU_2 41
#define ID_MESSAGE 42
#define ID_WEATHER 43
#define ID_CALCULATOR 44
#define ID_HEALTHY 45
#define ID_TEXT_INPUT 46
#define ID_CALCULATOR_RESULT 47
#define ID_CALCULATOR_C 48
#define ID_CALCULATOR_SIGN 49
#define ID_CALCULATOR_PERCENT 50
#define ID_CALCULATOR_DIVIDE 51
#define ID_CALCULATOR_MULTI 52
#define ID_CALCULATOR_MINUS 53
#define ID_CALCULATOR_PLUS 54
#define ID_CALCULATOR_7 55
#define ID_CALCULATOR_8 56
#define ID_CALCULATOR_9 57
#define ID_CALCULATOR_4 58
#define ID_CALCULATOR_5 59
#define ID_CALCULATOR_6 60
#define ID_CALCULATOR_1 61
#define ID_CALCULATOR_2 62
#define ID_CALCULATOR_3 63
#define ID_CALCULATOR_DOT 64
#define ID_CALCULATOR_0 65
#define ID_MAP 66
#define ID_SETTINGS 67
#define ID_GAMES 68
#define ID_CLOCK 69
#define ID_CONTACTS 70
#define ID_ABOUT 71


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID off_pixelmap_id;
    GX_RESOURCE_ID on_pixelmap_id;
    GX_RESOURCE_ID off_disabled_pixelmap_id;
    GX_RESOURCE_ID on_disabled_pixelmap_id;
} GX_RADIO_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    GX_SPRITE_FRAME *frame_list;
    USHORT           frame_count;
} GX_SPRITE_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
} GX_PIXELMAP_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
    VOID (*callback)(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
    int total_rows;
} GX_VERTICAL_LIST_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID readonly_fill_color_id;
    GX_RESOURCE_ID readonly_text_color_id;
    GX_CHAR *buffer;
    UINT buffer_size;
} GX_SINGLE_LINE_TEXT_INPUT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_UBYTE       whitespace;
    GX_BYTE        line_space;
} GX_ML_TEXT_VIEW_PROPERTIES;

typedef struct
{
   GX_CONST GX_STUDIO_WIDGET *base_info;
   UINT (*base_create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   GX_RECTANGLE size;
} GX_TEMPLATE_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct SETTINGS_LANGUAGE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_RADIO_BUTTON settings_language_English;
    GX_RADIO_BUTTON settings_language_Spanish;
    GX_RADIO_BUTTON settings_language_Chinese;
    GX_RADIO_BUTTON settings_language_Japanese;
} SETTINGS_LANGUAGE_CONTROL_BLOCK;

typedef struct MAP_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW map_screen_text_input_bg;
    GX_SINGLE_LINE_TEXT_INPUT map_screen_text_input;
    GX_PIXELMAP_BUTTON map_screen_search;
    GX_WINDOW map_screen_window_2;
    GX_PIXELMAP_BUTTON map_screen_pixelmap_button;
    GX_PIXELMAP_BUTTON map_screen_pixelmap_button_1;
    GX_ICON map_screen_icon;
    GX_PIXELMAP_BUTTON map_screen_pixelmap_button_2;
    GX_PIXELMAP_BUTTON map_screen_pixelmap_button_3;
} MAP_SCREEN_CONTROL_BLOCK;

typedef struct KEYBOARD_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW keyboard_screen_window_4;
    GX_PIXELMAP_BUTTON keyboard_screen_pixelmap_button_7;
    GX_SINGLE_LINE_TEXT_INPUT keyboard_screen_input_field;
    GX_PIXELMAP_BUTTON keyboard_screen_send;
    GX_WINDOW keyboard_screen_keyboard;
    GX_PIXELMAP_PROMPT keyboard_screen_number;
    GX_PIXELMAP_PROMPT keyboard_screen_up_arrow;
    GX_PIXELMAP_PROMPT keyboard_screen_space;
    GX_PIXELMAP_PROMPT keyboard_screen_enter;
    GX_PIXELMAP_PROMPT keyboard_screen_simble;
    GX_PIXELMAP_PROMPT keyboard_screen_backspace;
} KEYBOARD_SCREEN_CONTROL_BLOCK;

typedef struct HEALTHY_PACE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT healthy_pace_title;
    GX_ICON healthy_pace_icon_10_1;
    GX_PROMPT healthy_pace_prompt_16;
    GX_PROMPT healthy_pace_pace;
} HEALTHY_PACE_CONTROL_BLOCK;

typedef struct WEATHER_LOSANGELES_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT weather_LosAngeles_city_name_2;
    GX_WINDOW weather_LosAngeles_weather_frame;
    GX_WINDOW weather_LosAngeles_weather_info;
    GX_ICON weather_LosAngeles_icon_9;
    GX_PROMPT weather_LosAngeles_current_T_2;
    GX_PROMPT weather_LosAngeles_prompt_14_2;
    GX_PROMPT weather_LosAngeles_hi;
    GX_PROMPT weather_LosAngeles_low;
    GX_PROMPT weather_LosAngeles_hi_T;
    GX_PROMPT weather_LosAngeles_low_T;
    GX_SCROLLBAR weather_LosAngeles_vertical_scroll_7;
} WEATHER_LOSANGELES_CONTROL_BLOCK;

typedef struct WEATHER_SANFRANCISCO_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT weather_SanFrancisco_city_name_1;
    GX_WINDOW weather_SanFrancisco_weather_frame;
    GX_WINDOW weather_SanFrancisco_weather_info;
    GX_ICON weather_SanFrancisco_icon_7;
    GX_PROMPT weather_SanFrancisco_current_T;
    GX_PROMPT weather_SanFrancisco_prompt_14;
    GX_PROMPT weather_SanFrancisco_hi;
    GX_PROMPT weather_SanFrancisco_low;
    GX_PROMPT weather_SanFrancisco_hi_T;
    GX_PROMPT weather_SanFrancisco_low_T;
    GX_SCROLLBAR weather_SanFrancisco_vertical_scroll_6;
} WEATHER_SANFRANCISCO_CONTROL_BLOCK;

typedef struct CONTACT_INFO_EDIT_LIST_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT contact_info_edit_list_title_firstname;
    GX_PROMPT contact_info_edit_list_title_mobile;
    GX_PROMPT contact_info_edit_list_title_office;
    GX_PROMPT contact_info_edit_list_title_email;
    GX_PROMPT contact_info_edit_list_title_address;
    GX_SINGLE_LINE_TEXT_INPUT contact_info_edit_list_firstname;
    GX_SINGLE_LINE_TEXT_INPUT contact_info_edit_list_mobile;
    GX_SINGLE_LINE_TEXT_INPUT contact_info_edit_list_office;
    GX_SINGLE_LINE_TEXT_INPUT contact_info_edit_list_email;
    GX_SINGLE_LINE_TEXT_INPUT contact_info_edit_list_address;
    GX_PROMPT contact_info_edit_list_title_lastname;
    GX_SINGLE_LINE_TEXT_INPUT contact_info_edit_list_lastname;
} CONTACT_INFO_EDIT_LIST_CONTROL_BLOCK;

typedef struct CONTACT_INFO_LIST_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT contact_info_list_title_mobile;
    GX_PROMPT contact_info_list_title_office;
    GX_PROMPT contact_info_list_title_email;
    GX_PROMPT contact_info_list_mobile;
    GX_PROMPT contact_info_list_office;
    GX_PIXELMAP_BUTTON contact_info_list_text2mobile;
    GX_PIXELMAP_BUTTON contact_info_list_text2office;
    GX_PROMPT contact_info_list_email;
    GX_PROMPT contact_info_list_title_address;
    GX_MULTI_LINE_TEXT_VIEW contact_info_list_address;
} CONTACT_INFO_LIST_CONTROL_BLOCK;

typedef struct CONTACT_INFO_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON contact_info_screen_contact_info_back;
    GX_PROMPT contact_info_screen_last_name;
    GX_PROMPT contact_info_screen_first_name;
    GX_PIXELMAP_BUTTON contact_info_screen_contact_info_edit;
    GX_WINDOW contact_info_screen_contact_info_window;
    GX_SCROLLBAR contact_info_screen_contact_info_list_scroll;
} CONTACT_INFO_SCREEN_CONTROL_BLOCK;

typedef struct ABOUT_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW about_screen_transparent_cover;
    GX_PROMPT about_screen_prompt_8;
    GX_PROMPT about_screen_prompt_9;
    GX_PROMPT about_screen_prompt_10;
    GX_PROMPT about_screen_prompt_10_2;
    GX_PROMPT about_screen_prompt_11;
} ABOUT_SCREEN_CONTROL_BLOCK;

typedef struct TEMPLATE_MAIN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_ICON template_main_battery;
    GX_ICON template_main_sound;
    GX_ICON template_main_wifi;
    GX_ICON template_main_bluetooth;
} TEMPLATE_MAIN_CONTROL_BLOCK;

typedef struct MENU_WINDOW_3_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON menu_window_3_map;
    GX_PIXELMAP_BUTTON menu_window_3_settings;
} MENU_WINDOW_3_CONTROL_BLOCK;

typedef struct MENU_WINDOW_2_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON menu_window_2_games;
    GX_PIXELMAP_BUTTON menu_window_2_clock;
    GX_PIXELMAP_BUTTON menu_window_2_contacts;
    GX_PIXELMAP_BUTTON menu_window_2_about;
} MENU_WINDOW_2_CONTROL_BLOCK;

typedef struct CLOCK_ADD_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_PIXELMAP_BUTTON clock_add_screen_clock_add_time;
    GX_PIXELMAP_BUTTON clock_add_screen_clock_add_alarm;
    GX_PIXELMAP_BUTTON clock_add_screen_clock_add_stopwatch;
    GX_VERTICAL_LIST clock_add_screen_city_list;
    GX_SCROLLBAR clock_add_screen_vertical_scroll_2;
    GX_PIXELMAP_BUTTON clock_add_screen_clock_add_close;
    GX_WINDOW clock_add_screen_window;
    GX_SINGLE_LINE_TEXT_INPUT clock_add_screen_time_add_text_input;
    GX_PIXELMAP_BUTTON clock_add_screen_clock_add_search;
} CLOCK_ADD_SCREEN_CONTROL_BLOCK;

typedef struct ALARM_ADD_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_PIXELMAP_BUTTON alarm_add_screen_alarm_add_time;
    GX_PIXELMAP_BUTTON alarm_add_screen_alarm_add_alarm;
    GX_PIXELMAP_BUTTON alarm_add_screen_alarm_add_stopwatch;
    GX_PROMPT alarm_add_screen_alarm_add_title;
    GX_PIXELMAP_BUTTON alarm_add_screen_close;
    GX_PIXELMAP_BUTTON alarm_add_screen_hour_down;
    GX_PIXELMAP_BUTTON alarm_add_screen_minute_up;
    GX_PIXELMAP_BUTTON alarm_add_screen_am_pm;
    GX_PROMPT alarm_add_screen_prompt_12_1;
    GX_PROMPT alarm_add_screen_prompt_13;
    GX_PROMPT alarm_add_screen_prompt_12_3;
    GX_SINGLE_LINE_TEXT_INPUT alarm_add_screen_text_input_hour;
    GX_SINGLE_LINE_TEXT_INPUT alarm_add_screen_text_input_minute;
    GX_ICON alarm_add_screen_icon_1;
    GX_ICON alarm_add_screen_icon_3;
    GX_PIXELMAP_BUTTON alarm_add_screen_hour_up;
    GX_PIXELMAP_BUTTON alarm_add_screen_minute_down;
} ALARM_ADD_SCREEN_CONTROL_BLOCK;

typedef struct ALARM_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_PIXELMAP_BUTTON alarm_screen_alarm_time;
    GX_PIXELMAP_BUTTON alarm_screen_alarm_alarm;
    GX_PIXELMAP_BUTTON alarm_screen_alarm_stopwatch;
    GX_VERTICAL_LIST alarm_screen_alarm_list;
    GX_SCROLLBAR alarm_screen_vertical_scroll_9;
    GX_PIXELMAP_BUTTON alarm_screen_alarm_add;
} ALARM_SCREEN_CONTROL_BLOCK;

typedef struct STOPWATCH_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_PIXELMAP_BUTTON stopwatch_screen_stopwatch_time;
    GX_PIXELMAP_BUTTON stopwatch_screen_stopwatch_alarm;
    GX_PIXELMAP_BUTTON stopwatch_screen_stopwatch_stopwatch;
    GX_PROMPT stopwatch_screen_title;
    GX_PROMPT stopwatch_screen_prompt_minute;
    GX_PROMPT stopwatch_screen_prompt_second;
    GX_PROMPT stopwatch_screen_prompt_micro_second;
    GX_PIXELMAP_BUTTON stopwatch_screen_stopwatch_start_stop;
    GX_PIXELMAP_BUTTON stopwatch_screen_stopwatch_reset;
    GX_ICON stopwatch_screen_icon_5;
    GX_ICON stopwatch_screen_icon_6;
    GX_ICON stopwatch_screen_icon_10;
} STOPWATCH_SCREEN_CONTROL_BLOCK;

typedef struct SETTINGS_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_PIXELMAP_BUTTON settings_screen_dashboard;
    GX_PIXELMAP_BUTTON settings_screen_brush;
    GX_PIXELMAP_BUTTON settings_screen_language;
    GX_PIXELMAP_BUTTON settings_screen_sound;
} SETTINGS_SCREEN_CONTROL_BLOCK;

typedef struct MSG_SEND_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_PIXELMAP_BUTTON msg_send_screen_back;
    GX_PROMPT msg_send_screen_prompt_1;
    GX_WINDOW msg_send_screen_dialog_frame;
    GX_WINDOW msg_send_screen_dialog;
    GX_SCROLLBAR msg_send_screen_scroll;
    GX_WINDOW msg_send_screen_window_3;
    GX_PROMPT msg_send_screen_input_field;
    GX_PIXELMAP_BUTTON msg_send_screen_pixelmap_button_4;
    GX_PROMPT msg_send_screen_name;
    GX_WINDOW msg_send_screen_preloader_window;
} MSG_SEND_SCREEN_CONTROL_BLOCK;

typedef struct MSG_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_PIXELMAP_BUTTON msg_screen_new_msg;
    GX_PROMPT msg_screen_prompt_5;
    GX_WINDOW msg_screen_text_input_bg;
    GX_VERTICAL_LIST msg_screen_msg_list;
    GX_SCROLLBAR msg_screen_vertical_scroll_8;
    GX_SINGLE_LINE_TEXT_INPUT msg_screen_text_input;
    GX_PIXELMAP_BUTTON msg_screen_search;
} MSG_SCREEN_CONTROL_BLOCK;

typedef struct HEALTHY_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_WINDOW healthy_screen_healthy_heart_rate;
    GX_PROMPT healthy_screen_item_name;
    GX_SPRITE healthy_screen_sprite;
    GX_PROMPT healthy_screen_prompt;
    GX_PROMPT healthy_screen_heart_rate;
    GX_PIXELMAP_BUTTON healthy_screen_left_arrow;
    GX_PIXELMAP_BUTTON healthy_screen_right_arrow;
    GX_WINDOW healthy_screen_waveform_window;
    GX_ICON healthy_screen_stopwatch;
} HEALTHY_SCREEN_CONTROL_BLOCK;

typedef struct WEATHER_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_WINDOW weather_screen_weather_NewYork;
    GX_PROMPT weather_screen_city_name;
    GX_WINDOW weather_screen_weather_frame;
    GX_WINDOW weather_screen_weather_info;
    GX_ICON weather_screen_icon_8;
    GX_PROMPT weather_screen_current_T_1;
    GX_PROMPT weather_screen_prompt_14_1;
    GX_PROMPT weather_screen_hi;
    GX_PROMPT weather_screen_low;
    GX_PROMPT weather_screen_hi_T;
    GX_PROMPT weather_screen_low_T;
    GX_SCROLLBAR weather_screen_vertical_scroll_5;
    GX_PIXELMAP_BUTTON weather_screen_left_arrow;
    GX_PIXELMAP_BUTTON weather_screen_right_arrow;
} WEATHER_SCREEN_CONTROL_BLOCK;

typedef struct CONTACT_INFO_EDIT_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_PIXELMAP_BUTTON contact_info_edit_screen_save;
    GX_PROMPT contact_info_edit_screen_prompt_3;
    GX_PIXELMAP_BUTTON contact_info_edit_screen_close;
    GX_WINDOW contact_info_edit_screen_edit_window;
    GX_SCROLLBAR contact_info_edit_screen_vertical_scroll_4;
} CONTACT_INFO_EDIT_SCREEN_CONTROL_BLOCK;

typedef struct CONTACT_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_VERTICAL_LIST contact_screen_contact_list;
    GX_SCROLLBAR contact_screen_contact_list_scroll;
    GX_WINDOW contact_screen_contact_text_input_bg;
    GX_SINGLE_LINE_TEXT_INPUT contact_screen_contact_text_input;
    GX_PIXELMAP_BUTTON contact_screen_contact_search;
} CONTACT_SCREEN_CONTROL_BLOCK;

typedef struct GAME_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_VERTICAL_LIST game_screen_game_list;
    GX_SCROLLBAR game_screen_vertical_scroll_3;
} GAME_SCREEN_CONTROL_BLOCK;

typedef struct MAIN_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_PROMPT main_screen_date;
    GX_PROMPT main_screen_hour;
    GX_PROMPT main_screen_am_pm;
    GX_PIXELMAP_BUTTON main_screen_btn_menu_0;
    GX_PIXELMAP_BUTTON main_screen_btn_menu_1;
    GX_PIXELMAP_BUTTON main_screen_btn_menu_2;
    GX_WINDOW main_screen_menu_window;
    GX_WINDOW main_screen_menu_window_1;
    GX_PIXELMAP_BUTTON main_screen_message;
    GX_PIXELMAP_BUTTON main_screen_weather;
    GX_PIXELMAP_BUTTON main_screen_calculator;
    GX_PIXELMAP_BUTTON main_screen_healthy;
    GX_ICON main_screen_lower_dot;
    GX_ICON main_screen_upper_dot;
    GX_PROMPT main_screen_minute;
} MAIN_SCREEN_CONTROL_BLOCK;

typedef struct CLOCK_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_PIXELMAP_BUTTON clock_screen_time_time;
    GX_PIXELMAP_BUTTON clock_screen_time_alarm;
    GX_PIXELMAP_BUTTON clock_screen_time_stopwatch;
    GX_PIXELMAP_BUTTON clock_screen_time_add;
    GX_VERTICAL_LIST clock_screen_time_list;
    GX_SCROLLBAR clock_screen_vertical_scroll;
} CLOCK_SCREEN_CONTROL_BLOCK;

typedef struct CALCULATOR_SCREEN_CONTROL_BLOCK_STRUCT
{
    TEMPLATE_MAIN_CONTROL_BLOCK base;
    GX_ICON calculator_screen_text_input_bg;
    GX_SINGLE_LINE_TEXT_INPUT calculator_screen_text_input;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_result;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_c;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_sign;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_percent;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_divide;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_multi;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_minus;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_plus;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_7;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_8;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_9;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_4;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_5;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_6;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_1;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_2;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_3;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_dot;
    GX_PIXELMAP_BUTTON calculator_screen_calculator_0;
} CALCULATOR_SCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern SETTINGS_LANGUAGE_CONTROL_BLOCK settings_language;
extern MAP_SCREEN_CONTROL_BLOCK map_screen;
extern CLOCK_ADD_SCREEN_CONTROL_BLOCK clock_add_screen;
extern ALARM_ADD_SCREEN_CONTROL_BLOCK alarm_add_screen;
extern ALARM_SCREEN_CONTROL_BLOCK alarm_screen;
extern STOPWATCH_SCREEN_CONTROL_BLOCK stopwatch_screen;
extern SETTINGS_SCREEN_CONTROL_BLOCK settings_screen;
extern KEYBOARD_SCREEN_CONTROL_BLOCK keyboard_screen;
extern MSG_SEND_SCREEN_CONTROL_BLOCK msg_send_screen;
extern MSG_SCREEN_CONTROL_BLOCK msg_screen;
extern HEALTHY_PACE_CONTROL_BLOCK healthy_pace;
extern HEALTHY_SCREEN_CONTROL_BLOCK healthy_screen;
extern WEATHER_LOSANGELES_CONTROL_BLOCK weather_LosAngeles;
extern WEATHER_SANFRANCISCO_CONTROL_BLOCK weather_SanFrancisco;
extern WEATHER_SCREEN_CONTROL_BLOCK weather_screen;
extern CONTACT_INFO_EDIT_LIST_CONTROL_BLOCK contact_info_edit_list;
extern CONTACT_INFO_EDIT_SCREEN_CONTROL_BLOCK contact_info_edit_screen;
extern CONTACT_INFO_LIST_CONTROL_BLOCK contact_info_list;
extern CONTACT_INFO_SCREEN_CONTROL_BLOCK contact_info_screen;
extern CONTACT_SCREEN_CONTROL_BLOCK contact_screen;
extern GAME_SCREEN_CONTROL_BLOCK game_screen;
extern MAIN_SCREEN_CONTROL_BLOCK main_screen;
extern CLOCK_SCREEN_CONTROL_BLOCK clock_screen;
extern ABOUT_SCREEN_CONTROL_BLOCK about_screen;
extern CALCULATOR_SCREEN_CONTROL_BLOCK calculator_screen;
extern TEMPLATE_MAIN_CONTROL_BLOCK template_main;
extern MENU_WINDOW_3_CONTROL_BLOCK menu_window_3;
extern MENU_WINDOW_2_CONTROL_BLOCK menu_window_2;
#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT settings_language_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT map_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID map_screen_draw(GX_WINDOW *widget);
VOID custom_pixelmap_button_draw(GX_PIXELMAP_BUTTON *widget);
UINT clock_add_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID city_list_row_create(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT alarm_add_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT custom_text_input_process(GX_SINGLE_LINE_TEXT_INPUT *widget, GX_EVENT *event_ptr);
UINT alarm_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID alarm_list_row_create(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT stopwatch_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID stopwatch_pixelmap_button_draw(GX_PIXELMAP_BUTTON *widget);
UINT settings_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT keyboard_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT input_field_event_process(GX_SINGLE_LINE_TEXT_INPUT *widget, GX_EVENT *event_ptr);
UINT msg_send_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID preloader_windown_draw(GX_WINDOW *widget);
UINT msg_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID msg_list_row_create(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT msg_screen_text_input_event_handler(GX_SINGLE_LINE_TEXT_INPUT *widget, GX_EVENT *event_ptr);
UINT healthy_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID waveform_window_draw(GX_WINDOW *widget);
UINT weather_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID custom_text_input_draw(GX_SINGLE_LINE_TEXT_INPUT *widget);
UINT contact_info_edit_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT contact_info_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT contact_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID contact_list_row_create(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT template_main_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID game_list_row_create(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT main_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT menu_window_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT clock_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID time_list_row_create(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
UINT calculator_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID calculator_pixelmap_button_draw(GX_PIXELMAP_BUTTON *widget);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
    USHORT     rotation_angle;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_radio_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_sprite_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_list_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_text_input_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_multi_line_text_view_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_scrollbar_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_template_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
