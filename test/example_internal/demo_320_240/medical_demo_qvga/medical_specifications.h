/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.2.0.1                                               */
/*  Date (dd.mm.yyyy): 31.10.2022   Time (hh:mm): 14:09                        */
/*******************************************************************************/


#ifndef _MEDICAL_SPECIFICATIONS_H_
#define _MEDICAL_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define ID_MEDS_SCREEN 1
#define ID_PATIENTS_BUTTON 2
#define ID_VITALS_BUTTON 3
#define ID_SLIDER1 4
#define ID_VAL1_DISPLAY 5
#define ID_SLIDER2 6
#define ID_SLIDER4 7
#define ID_VAL2_DISPLAY 8
#define ID_VAL4_DISPLAY 9
#define ID_VAL3_DISPLAY 10
#define ID_SLIDER3 11
#define ID_MEDS_BUTTON 12
#define ID_VITALS_SCREEN 13
#define ID_CHART_WINDOW 14
#define ID_CURRENT_VAL 15
#define ID_AVERAGE_VAL 16
#define ID_MIN_VAL 17
#define ID_MAX_VAL 18
#define ID_PATIENTS_SCREEN 19
#define ID_PATIENT_LIST 20


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    int min_val;
    int max_val;
    int current_val;
    int increment;
    GX_VALUE min_travel;
    GX_VALUE max_travel;
    GX_VALUE needle_width;
    GX_VALUE needle_height;
    GX_VALUE needle_inset;
    GX_VALUE needle_hotspot;
    GX_RESOURCE_ID lower_pixelmap;
    GX_RESOURCE_ID upper_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
} GX_PIXELMAP_SLIDER_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
} GX_PIXELMAP_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
    VOID (*callback)(GX_VERTICAL_LIST *, GX_WIDGET *, INT);
    int total_rows;
} GX_VERTICAL_LIST_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct MEDS_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON meds_screen_pixelmap_button2;
    GX_PROMPT meds_screen_prompt3;
    GX_ICON meds_screen_icon3;
    GX_PIXELMAP_PROMPT meds_screen_prompt1;
    GX_ICON meds_screen_icon1;
    GX_PIXELMAP_BUTTON meds_screen_pixelmap_button3;
    GX_PROMPT meds_screen_prompt4;
    GX_ICON meds_screen_icon4;
    GX_PIXELMAP_SLIDER meds_screen_pixelmap_slider1;
    GX_ICON meds_screen_icon5;
    GX_ICON meds_screen_icon6;
    GX_PROMPT meds_screen_prompt5;
    GX_PROMPT meds_screen_saline_val;
    GX_PIXELMAP_SLIDER meds_screen_pixelmap_slider2;
    GX_ICON meds_screen_icon10;
    GX_ICON meds_screen_icon9;
    GX_PIXELMAP_SLIDER meds_screen_pixelmap_slider4;
    GX_ICON meds_screen_icon7;
    GX_ICON meds_screen_icon8;
    GX_PROMPT meds_screen_diovan_val;
    GX_PROMPT meds_screen_prompt8;
    GX_PROMPT meds_screen_prompt7;
    GX_PIXELMAP_SLIDER meds_screen_pixelmap_slider3;
    GX_ICON meds_screen_icon12;
    GX_ICON meds_screen_icon11;
    GX_PROMPT meds_screen_prompt6;
    GX_PROMPT meds_screen_lovenox_val;
    GX_PROMPT meds_screen_coreg_cr_val;
    GX_PIXELMAP_BUTTON meds_screen_pixelmap_button1;
    GX_PROMPT meds_screen_prompt2;
    GX_ICON meds_screen_icon2;
    GX_PROMPT meds_screen_prompt_1;
    GX_PROMPT meds_screen_cpu_prompt;
    GX_PROMPT meds_screen_percent_prompt;
} MEDS_SCREEN_CONTROL_BLOCK;

typedef struct VITALS_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_PROMPT vitals_screen_prompt1;
    GX_ICON vitals_screen_icon1;
    GX_WINDOW vitals_screen_chart_window;
    GX_PIXELMAP_SLIDER vitals_screen_chart_pen;
    GX_PROMPT vitals_screen_current_rate;
    GX_ICON vitals_screen_heart_icon;
    GX_WINDOW vitals_screen_window2;
    GX_PROMPT vitals_screen_prompt5;
    GX_PROMPT vitals_screen_prompt6;
    GX_PROMPT vitals_screen_Average;
    GX_PROMPT vitals_screen_minimum;
    GX_PROMPT vitals_screen_prompt7;
    GX_PROMPT vitals_screen_prompt8;
    GX_PROMPT vitals_screen_maximum;
    GX_PROMPT vitals_screen_prompt9;
    GX_PROMPT vitals_screen_prompt10;
    GX_PIXELMAP_BUTTON vitals_screen_pixelmap_button1_1;
    GX_PROMPT vitals_screen_prompt2_1;
    GX_ICON vitals_screen_icon2_1;
    GX_PIXELMAP_BUTTON vitals_screen_pixelmap_button2_1;
    GX_PROMPT vitals_screen_prompt3_1;
    GX_ICON vitals_screen_icon3_1;
    GX_PIXELMAP_BUTTON vitals_screen_pixelmap_button3_1;
    GX_PROMPT vitals_screen_prompt4_1;
    GX_ICON vitals_screen_icon4_1;
    GX_PROMPT vitals_screen_prompt_2;
    GX_PROMPT vitals_screen_cpu_prompt;
    GX_PROMPT vitals_screen_percent_prompt;
} VITALS_SCREEN_CONTROL_BLOCK;

typedef struct PATIENTS_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_PROMPT patients_screen_prompt1;
    GX_ICON patients_screen_icon1;
    GX_VERTICAL_LIST patients_screen_patient_list;
    GX_SCROLLBAR patients_screen_vertical_scroll1;
    GX_PIXELMAP_BUTTON patients_screen_pixelmap_button1;
    GX_PROMPT patients_screen_prompt2;
    GX_ICON patients_screen_icon2;
    GX_PIXELMAP_BUTTON patients_screen_pixelmap_button3;
    GX_PROMPT patients_screen_prompt4;
    GX_ICON patients_screen_icon4;
    GX_ICON patients_screen_icon5;
    GX_PROMPT patients_screen_prompt5;
    GX_PROMPT patients_screen_prompt6;
    GX_PROMPT patients_screen_prompt7;
    GX_PIXELMAP_BUTTON patients_screen_pixelmap_button2;
    GX_PROMPT patients_screen_prompt3;
    GX_ICON patients_screen_icon3;
    GX_PROMPT patients_screen_prompt_3;
    GX_PROMPT patients_screen_cpu_prompt;
    GX_PROMPT patients_screen_percent_prompt;
} PATIENTS_SCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern MEDS_SCREEN_CONTROL_BLOCK meds_screen;
extern VITALS_SCREEN_CONTROL_BLOCK vitals_screen;
extern PATIENTS_SCREEN_CONTROL_BLOCK patients_screen;
#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT meds_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT vitals_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT chart_window_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID chart_window_draw(GX_WINDOW *widget);
UINT patients_screen_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID patient_row_create(GX_VERTICAL_LIST *, GX_WIDGET *, INT);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
    USHORT     rotation_angle;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_list_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_vertical_scrollbar_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
