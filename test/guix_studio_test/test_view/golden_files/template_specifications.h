/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.2.1.2                                               */
/*  Date (dd.mm.yyyy): 16. 6.2023   Time (hh:mm): 17:01                        */
/*******************************************************************************/


#ifndef _TEMPLATE_SPECIFICATIONS_H_
#define _TEMPLATE_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define ID_DYNAMIC_TEMPLATE_SCREEN 1
#define IDB_NEXT 2
#define ID_TEMPLATE_SCREEN 3
#define ID_CHILD_TEMPLATE_SCREEN 4


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT

#define GX_ACTION_FLAG_DYNAMIC_TARGET 0x01
#define GX_ACTION_FLAG_DYNAMIC_PARENT 0x02
#define GX_ACTION_FLAG_POP_TARGET     0x04
#define GX_ACTION_FLAG_POP_PARENT     0x08

typedef struct GX_STUDIO_ACTION_STRUCT
{
    GX_UBYTE opcode;
    GX_UBYTE flags;
    GX_CONST VOID *parent;
    GX_CONST VOID *target;
    GX_CONST GX_ANIMATION_INFO  *animation;
} GX_STUDIO_ACTION;

typedef struct GX_STUDIO_EVENT_ENTRY_STRUCT
{
    ULONG event_type;
    USHORT event_sender;
    GX_CONST GX_STUDIO_ACTION *action_list;
} GX_STUDIO_EVENT_ENTRY;

typedef struct GX_STUDIO_EVENT_PROCESS_STRUCT 
{
    GX_CONST GX_STUDIO_EVENT_ENTRY *event_table;
    UINT (*chain_event_handler)(GX_WIDGET *, GX_EVENT *);
} GX_STUDIO_EVENT_PROCESS;

/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    int min_val;
    int max_val;
    int current_val;
    int increment;
    GX_VALUE min_travel;
    GX_VALUE max_travel;
    GX_VALUE needle_width;
    GX_VALUE needle_height;
    GX_VALUE needle_inset;
    GX_VALUE needle_hotspot;
    GX_RESOURCE_ID lower_pixelmap;
    GX_RESOURCE_ID upper_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
} GX_PIXELMAP_SLIDER_PROPERTIES;

typedef struct
{
    GX_VALUE       xcenter;
    GX_VALUE       ycenter;
    USHORT         radius;
    USHORT         track_width;
    GX_VALUE       current_angle;
    GX_VALUE       min_angle;
    GX_VALUE       max_angle;
    GX_RESOURCE_ID background_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
    USHORT         animation_total_steps;
    USHORT         animation_delay;
    USHORT         animation_style;
    VOID         (*animation_update_callback)(struct GX_RADIAL_SLIDER_STRUCT *slider);
} GX_RADIAL_SLIDER_PROPERTIES;

typedef struct
{
    GX_SPRITE_FRAME *frame_list;
    USHORT           frame_count;
} GX_SPRITE_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
    VOID (*format_func)(GX_NUMERIC_PIXELMAP_PROMPT *, INT);
    INT            numeric_prompt_value;
} GX_NUMERIC_PIXELMAP_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_BYTE        whitespace;
    GX_BYTE        line_space;
} GX_ML_TEXT_VIEW_PROPERTIES;

typedef struct
{
   GX_CONST GX_STUDIO_WIDGET *base_info;
   UINT (*base_create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   GX_RECTANGLE size;
} GX_TEMPLATE_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
    GX_VALUE       text_x_offset;
    GX_VALUE       text_y_offset;
    GX_VALUE       list_total_count;
} GX_MENU_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID expand_map_id;
    GX_RESOURCE_ID collapse_map_id;
    GX_RESOURCE_ID root_line_color_id;
    GX_VALUE       indentation;
} GX_TREE_VIEW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID      string_id;
    GX_RESOURCE_ID      normal_text_color_id;
    GX_RESOURCE_ID      selected_text_color_id;
    GX_RESOURCE_ID      disabled_text_color_id;
    GX_UBYTE            whitespace;
    GX_BYTE             line_space;
    GX_RICH_TEXT_FONTS *fonts;
} GX_RICH_TEXT_VIEW_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct FOLDER_1_BASE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
} FOLDER_1_BASE_CONTROL_BLOCK;

typedef struct FOLDER_1_WINDOW_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    FOLDER_1_BASE_CONTROL_BLOCK folder_1_window_folder_1_base;
} FOLDER_1_WINDOW_CONTROL_BLOCK;

typedef struct BASE_TREE_VIEW_CONTROL_BLOCK_STRUCT
{
    GX_TREE_VIEW_MEMBERS_DECLARE
    GX_MENU base_tree_view_base_tree_view_menu_1;
    GX_MENU base_tree_view_menu_5;
    GX_MENU base_tree_view_menu_3;
    GX_MENU base_tree_view_menu_4;
} BASE_TREE_VIEW_CONTROL_BLOCK;

typedef struct BASE_ACCORDION_CONTROL_BLOCK_STRUCT
{
    
    GX_MENU base_accordion_menu;
    GX_MENU base_accordion_menu_1;
    GX_MENU base_accordion_menu_2;
} BASE_ACCORDION_CONTROL_BLOCK;

typedef struct BASE_SPRITE_CONTROL_BLOCK_STRUCT
{
    GX_SPRITE_MEMBERS_DECLARE
} BASE_SPRITE_CONTROL_BLOCK;

typedef struct BASE_RADIAL_SLIDER_CONTROL_BLOCK_STRUCT
{
    GX_RADIAL_SLIDER_MEMBERS_DECLARE
} BASE_RADIAL_SLIDER_CONTROL_BLOCK;

typedef struct BASE_PIXELMAP_SLIDER_CONTROL_BLOCK_STRUCT
{
    GX_PIXELMAP_SLIDER_MEMBERS_DECLARE
} BASE_PIXELMAP_SLIDER_CONTROL_BLOCK;

typedef struct BASE_RICH_TEXT_VIEW_CONTROL_BLOCK_STRUCT
{
    GX_RICH_TEXT_VIEW_MEMBERS_DECLARE
} BASE_RICH_TEXT_VIEW_CONTROL_BLOCK;

typedef struct BASE_ML_TEXT_VIEW_CONTROL_BLOCK_STRUCT
{
    GX_MULTI_LINE_TEXT_VIEW_MEMBERS_DECLARE
} BASE_ML_TEXT_VIEW_CONTROL_BLOCK;

typedef struct BASE_NUMERIC_PIXELMAP_PROMPT_CONTROL_BLOCK_STRUCT
{
    GX_NUMERIC_PIXELMAP_PROMPT_MEMBERS_DECLARE
} BASE_NUMERIC_PIXELMAP_PROMPT_CONTROL_BLOCK;

typedef struct BASE_PROMPT_CONTROL_BLOCK_STRUCT
{
    GX_PROMPT_MEMBERS_DECLARE
} BASE_PROMPT_CONTROL_BLOCK;

typedef struct BASE_PIXELMAP_BUTTON_CONTROL_BLOCK_STRUCT
{
    GX_PIXELMAP_BUTTON_MEMBERS_DECLARE
} BASE_PIXELMAP_BUTTON_CONTROL_BLOCK;

typedef struct BASE_ICON_CONTROL_BLOCK_STRUCT
{
    GX_ICON_MEMBERS_DECLARE
} BASE_ICON_CONTROL_BLOCK;

typedef struct BASE_RADIAL_PROGRESS_BAR_CONTROL_BLOCK_STRUCT
{
    GX_RADIAL_PROGRESS_BAR_MEMBERS_DECLARE
} BASE_RADIAL_PROGRESS_BAR_CONTROL_BLOCK;

typedef struct TEST_BASE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW test_base_test_base_child;
} TEST_BASE_CONTROL_BLOCK;

typedef struct BASE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT base_child_prompt;
} BASE_CONTROL_BLOCK;

typedef struct WIDGET_TEMPLATE_CONTAINER_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    BASE_ICON_CONTROL_BLOCK widget_template_container_derived;
    BASE_PIXELMAP_BUTTON_CONTROL_BLOCK widget_template_container_derived_1;
    BASE_PIXELMAP_SLIDER_CONTROL_BLOCK widget_template_container_derived_2;
    BASE_PROMPT_CONTROL_BLOCK widget_template_container_derived_3;
    BASE_NUMERIC_PIXELMAP_PROMPT_CONTROL_BLOCK widget_template_container_derived_4;
    BASE_RADIAL_SLIDER_CONTROL_BLOCK widget_template_container_derived_5;
    BASE_RICH_TEXT_VIEW_CONTROL_BLOCK widget_template_container_derived_6;
    BASE_SPRITE_CONTROL_BLOCK widget_template_container_derived_7;
    BASE_ML_TEXT_VIEW_CONTROL_BLOCK widget_template_container_derived_8;
    BASE_TREE_VIEW_CONTROL_BLOCK widget_template_container_derived_9;
    BASE_ACCORDION_CONTROL_BLOCK widget_template_container_derived_10;
    BASE_RADIAL_PROGRESS_BAR_CONTROL_BLOCK widget_template_container_derived_11;
} WIDGET_TEMPLATE_CONTAINER_CONTROL_BLOCK;

typedef struct TEST_BASE_DERIVED_3_CONTROL_BLOCK_STRUCT
{
    TEST_BASE_CONTROL_BLOCK base;
} TEST_BASE_DERIVED_3_CONTROL_BLOCK;

typedef struct TEST_BASE_DERIVED_0_CONTROL_BLOCK_STRUCT
{
    TEST_BASE_CONTROL_BLOCK base;
    GX_WINDOW test_base_derived_0_test_base_derived_0_child;
} TEST_BASE_DERIVED_0_CONTROL_BLOCK;

typedef struct DYNAMIC_TEMPLATE_SCREEN_CONTROL_BLOCK_STRUCT
{
    BASE_CONTROL_BLOCK base;
} DYNAMIC_TEMPLATE_SCREEN_CONTROL_BLOCK;

typedef struct TEMPLATE_SCREEN_CONTROL_BLOCK_STRUCT
{
    BASE_CONTROL_BLOCK base;
    GX_TEXT_BUTTON template_screen_next_button_10;
    GX_PROMPT template_screen_prompt_13;
} TEMPLATE_SCREEN_CONTROL_BLOCK;

typedef struct CHILD_TEMPLATE_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_TEXT_BUTTON child_template_screen_next_button_9;
    BASE_CONTROL_BLOCK child_template_screen_child_template;
    GX_PROMPT child_template_screen_prompt_13_2;
} CHILD_TEMPLATE_SCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern FOLDER_1_BASE_CONTROL_BLOCK folder_1_base;
extern FOLDER_1_WINDOW_CONTROL_BLOCK folder_1_window;
extern WIDGET_TEMPLATE_CONTAINER_CONTROL_BLOCK widget_template_container;
extern BASE_TREE_VIEW_CONTROL_BLOCK base_tree_view;
extern BASE_ACCORDION_CONTROL_BLOCK base_accordion;
extern BASE_SPRITE_CONTROL_BLOCK base_sprite;
extern BASE_RADIAL_SLIDER_CONTROL_BLOCK base_radial_slider;
extern BASE_PIXELMAP_SLIDER_CONTROL_BLOCK base_pixelmap_slider;
extern BASE_RICH_TEXT_VIEW_CONTROL_BLOCK base_rich_text_view;
extern BASE_ML_TEXT_VIEW_CONTROL_BLOCK base_ml_text_view;
extern BASE_NUMERIC_PIXELMAP_PROMPT_CONTROL_BLOCK base_numeric_pixelmap_prompt;
extern BASE_PROMPT_CONTROL_BLOCK base_prompt;
extern BASE_PIXELMAP_BUTTON_CONTROL_BLOCK base_pixelmap_button;
extern BASE_ICON_CONTROL_BLOCK base_icon;
extern BASE_RADIAL_PROGRESS_BAR_CONTROL_BLOCK base_radial_progress_bar;
extern TEST_BASE_DERIVED_3_CONTROL_BLOCK test_base_derived_3;
extern TEST_BASE_DERIVED_0_CONTROL_BLOCK test_base_derived_0;
extern TEST_BASE_CONTROL_BLOCK test_base;
extern TEMPLATE_SCREEN_CONTROL_BLOCK template_screen;
extern CHILD_TEMPLATE_SCREEN_CONTROL_BLOCK child_template_screen;
extern BASE_CONTROL_BLOCK base;
#endif

/* Declare event process functions, draw functions, and callback functions     */


/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_CHAR ***language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_radial_progress_bar_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_radial_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_sprite_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_numeric_pixelmap_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_multi_line_text_view_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_template_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_menu_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_accordion_menu_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_tree_view_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_rich_text_view_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);
UINT gx_studio_auto_event_handler(GX_WIDGET *widget, GX_EVENT *event_ptr, GX_CONST GX_STUDIO_EVENT_PROCESS *record);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
