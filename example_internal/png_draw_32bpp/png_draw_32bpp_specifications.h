/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.2.0.1                                               */
/*  Date (dd.mm.yyyy): 31.10.2022   Time (hh:mm): 14:11                        */
/*******************************************************************************/


#ifndef _PNG_DRAW_32BPP_SPECIFICATIONS_H_
#define _PNG_DRAW_32BPP_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */



/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct WINDOW_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_ICON window_icon_1;
    GX_ICON window_icon_4;
    GX_ICON window_icon_5;
    GX_ICON window_icon_6;
    GX_ICON window_icon_7;
    GX_ICON window_icon_8;
    GX_ICON window_icon_9;
    GX_ICON window_icon_10;
    GX_ICON window_icon_11;
    GX_ICON window_icon_12;
    GX_ICON window_icon_13;
    GX_ICON window_icon_14;
    GX_ICON window_icon_15;
    GX_ICON window_icon_16;
    GX_ICON window_icon_2;
    GX_ICON window_icon_3;
    GX_ICON window_icon_17;
    GX_ICON window_icon_17_1;
    GX_ICON window_icon_17_2;
    GX_ICON window_icon_17_3;
    GX_ICON window_icon_17_4;
    GX_ICON window_icon_17_5;
    GX_ICON window_icon_17_6;
    GX_ICON window_icon_17_7;
    GX_ICON window_icon_17_8;
    GX_ICON window_icon_17_9;
    GX_ICON window_icon_17_10;
    GX_ICON window_icon_17_11;
    GX_ICON window_icon_17_12;
    GX_ICON window_icon_17_13;
    GX_ICON window_icon_17_14;
    GX_ICON window_icon_17_15;
    GX_ICON window_icon_17_16;
    GX_ICON window_icon_17_17;
    GX_ICON window_icon_17_18;
    GX_ICON window_icon_17_18_1;
    GX_ICON window_icon_17_18_2;
    GX_ICON window_icon_17_18_3;
    GX_ICON window_icon_17_18_4;
    GX_ICON window_icon_17_18_5;
    GX_ICON window_icon_17_18_6;
    GX_ICON window_icon_17_18_7;
    GX_ICON window_icon_17_18_8;
    GX_ICON window_icon_17_18_9;
    GX_ICON window_icon_17_18_10;
    GX_ICON window_icon_17_18_11;
    GX_ICON window_icon_17_18_12;
    GX_ICON window_icon_17_18_13;
    GX_ICON window_icon_17_18_14;
    GX_ICON window_icon_17_18_15;
    GX_ICON window_icon_17_18_16;
    GX_ICON window_icon_17_18_17;
    GX_ICON window_icon_17_18_17_1;
    GX_ICON window_icon_17_18_13_1;
    GX_ICON window_icon_17_18_13_2;
    GX_ICON window_icon_17_18_13_3;
    GX_ICON window_icon_17_18_13_4;
    GX_ICON window_icon_17_18_13_5;
    GX_ICON window_icon_17_18_13_6;
    GX_ICON window_icon_17_18_13_7;
    GX_ICON window_icon_17_18_13_8;
    GX_ICON window_icon_17_18_13_9;
    GX_ICON window_icon_17_18_13_10;
    GX_ICON window_icon_17_18_13_11;
    GX_ICON window_icon_17_18_13_12;
    GX_ICON window_icon_17_18_13_13;
    GX_ICON window_icon_17_18_13_14;
} WINDOW_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern WINDOW_CONTROL_BLOCK window;
#endif

/* Declare event process functions, draw functions, and callback functions     */


/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
    USHORT     rotation_angle;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
