/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.2.0.1                                               */
/*  Date (dd.mm.yyyy): 31.10.2022   Time (hh:mm): 14:11                        */
/*******************************************************************************/


#ifndef _SCREEN_DRAG_ANIMATION_WITH_BLOCK_MOVE_SPECIFICATIONS_H_
#define _SCREEN_DRAG_ANIMATION_WITH_BLOCK_MOVE_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define ID_MESSAGE 1
#define ID_WEATHER 2
#define ID_CALCULATOR 3
#define ID_HEALTHY 4
#define ID_GAMES 5
#define ID_CLOCK 6
#define ID_CONTACTS 7
#define ID_ABOUT 8
#define ID_MAP 9
#define ID_SETTINGS 10
#define ID_V_ANIMATION_COUNT 11
#define ID_H_ANIMATION_COUNT 12


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    VOID (*format_func)(GX_NUMERIC_PROMPT *, INT);
    INT            numeric_prompt_value;
} GX_NUMERIC_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct V_MENU_WINDOW_3_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON v_menu_window_3_message_3;
    GX_PIXELMAP_BUTTON v_menu_window_3_weather_3;
    GX_PIXELMAP_BUTTON v_menu_window_3_message;
    GX_PIXELMAP_BUTTON v_menu_window_3_weather;
} V_MENU_WINDOW_3_CONTROL_BLOCK;

typedef struct V_MENU_WINDOW_2_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON v_menu_window_2_message_2;
    GX_PIXELMAP_BUTTON v_menu_window_2_weather_2;
    GX_PIXELMAP_BUTTON v_menu_window_2_calculator_2;
    GX_PIXELMAP_BUTTON v_menu_window_2_healthy_2;
} V_MENU_WINDOW_2_CONTROL_BLOCK;

typedef struct H_MENU_WINDOW_2_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON h_menu_window_2_games;
    GX_PIXELMAP_BUTTON h_menu_window_2_clock;
    GX_PIXELMAP_BUTTON h_menu_window_2_contacts;
    GX_PIXELMAP_BUTTON h_menu_window_2_about;
} H_MENU_WINDOW_2_CONTROL_BLOCK;

typedef struct H_MENU_WINDOW_3_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PIXELMAP_BUTTON h_menu_window_3_map_1;
    GX_PIXELMAP_BUTTON h_menu_window_3_settings_1;
    GX_PIXELMAP_BUTTON h_menu_window_3_map;
    GX_PIXELMAP_BUTTON h_menu_window_3_settings;
} H_MENU_WINDOW_3_CONTROL_BLOCK;

typedef struct MAIN_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW main_screen_h_menu_window;
    GX_WINDOW main_screen_h_menu_window_1;
    GX_PIXELMAP_BUTTON main_screen_message;
    GX_PIXELMAP_BUTTON main_screen_weather;
    GX_PIXELMAP_BUTTON main_screen_calculator;
    GX_PIXELMAP_BUTTON main_screen_healthy;
    GX_WINDOW main_screen_v_menu_window;
    GX_WINDOW main_screen_v_menu_window_1;
    GX_PIXELMAP_BUTTON main_screen_message_1;
    GX_PIXELMAP_BUTTON main_screen_weather_1;
    GX_PIXELMAP_BUTTON main_screen_calculator_1;
    GX_PIXELMAP_BUTTON main_screen_healthy_1;
    GX_PROMPT main_screen_prompt;
    GX_NUMERIC_PROMPT main_screen_v_animation_count_prompt;
    GX_NUMERIC_PROMPT main_screen_h_animation_count_prompt;
} MAIN_SCREEN_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern V_MENU_WINDOW_3_CONTROL_BLOCK v_menu_window_3;
extern V_MENU_WINDOW_2_CONTROL_BLOCK v_menu_window_2;
extern H_MENU_WINDOW_2_CONTROL_BLOCK h_menu_window_2;
extern H_MENU_WINDOW_3_CONTROL_BLOCK h_menu_window_3;
extern MAIN_SCREEN_CONTROL_BLOCK main_screen;
#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT h_menu_window_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT v_menu_window_event_handler(GX_WINDOW *widget, GX_EVENT *event_ptr);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
    USHORT     rotation_angle;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_numeric_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
